# -------------------------------------------------------------------------------
# Licence:
# Copyright (c) 2012-2021
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#
# Name:        gdalwarp.py
# Purpose:
#
# Author:      Luzzi Valerio
#
# Created:     23/04/2021
# -------------------------------------------------------------------------------
import glob
import os
import site
import sys

from osgeo import gdal, gdalconst

from .filesystem import justpath, juststem


def isWindows():
    """
    isWindows
    """
    return os.name == "nt" or sys.platform.startswith("win")


def find_PROJ_LIB():
    """
    find_PROJ_LIB - the path of proj_lib
    """
    pathnames = []
    roots = site.getsitepackages()
    for root in roots:
        pathnames += glob.glob(root + "/osgeo/**/proj.db", recursive=True)
        if len(pathnames):
            break
    return justpath(pathnames[0]) if len(pathnames) else ""


def find_GDAL_DATA():
    """
    find_GDAL_DATA - the path of GDAL_DATA
    """
    pathnames = []
    roots = site.getsitepackages()
    for root in roots:
        pathnames += glob.glob(root + "/osgeo/**/gt_datum.csv", recursive=True)
        if len(pathnames):
            break
    return justpath(pathnames[0]) if len(pathnames) else ""


def SetGDALEnviron(restore=False):
    """
    SetGDALEnviron
    """
    if isWindows():
        if not restore:
            # gdal.Warp depends on PROJ_LIB and GDAL_DATA --------------------------
            # os.environ["PROJ_LIB"] = ..../site-packages/osgeo/data/proj
            # patch PROJ_LIB - save it before and restore after gdalwarp
            # print(find_PROJ_LIB())
            if "PROJ_LIB" in os.environ:
                os.environ["PROJ_LIB_SAVED"] = os.environ["PROJ_LIB"]
            if "GDAL_DATA" in os.environ:
                os.environ["GDAL_DATA_SAVED"] = os.environ["GDAL_DATA"]

            os.environ["PROJ_LIB"] = find_PROJ_LIB()
            os.environ["GDAL_DATA"] = find_GDAL_DATA()
            # print("Using PROJ_LIB=",os.environ["PROJ_LIB"])
        else:
            if "PROJ_LIB_SAVED" in os.environ:
                os.environ["PROJ_LIB"] = os.environ["PROJ_LIB_SAVED"]
            if "GDAL_DATA_SAVED" in os.environ:
                os.environ["GDAL_DATA"] = os.environ["GDAL_DATA_SAVED"]


def reasampling_method(method):
    """
    reasampling_method translation form text to gdalconst
    """
    method = method.lower()
    if method == "near":
        return gdalconst.GRIORA_NearestNeighbour
    elif method == "bilinear":
        return gdalconst.GRIORA_Bilinear
    elif method == "cubic":
        return gdalconst.GRIORA_Cubic
    elif method == "cubicspline":
        return gdalconst.GRIORA_CubicSpline
    elif method == "lanczos":
        return gdalconst.GRIORA_Lanczos
    elif method == "average":
        return gdalconst.GRIORA_Average
    elif method == "rms":
        return gdalconst.GRIORA_RMS
    elif method == "mode":
        return gdalconst.GRIORA_Mode
    elif method == "gauss":
        return gdalconst.GRIORA_Gauss
    else:
        return gdalconst.GRIORA_Bilinear


def gdalwarp(filelist, fileout, dstSRS="", cutline="", cropToCutline=False, pixelsize=(0, 0), resampleAlg="near", format="GTiff"):
    """
    gdalwarp
    """
    kwargs = {
        "format": format,
        "outputType": gdalconst.GDT_Float32,
        "dstNodata": -9999,
        "resampleAlg": reasampling_method(resampleAlg),
        "multithread": True
    }
    if format == 'GTiff':
        kwargs["creationOptions"] = ["BIGTIFF=YES", "TILED=YES", "BLOCKXSIZE=512", "BLOCKYSIZE=512", "COMPRESS=LZW"]

    if pixelsize[0] > 0:
        kwargs["xRes"] = pixelsize[0]
        kwargs["yRes"] = pixelsize[1]

    if dstSRS:
        kwargs["dstSRS"] = dstSRS

    if os.path.isfile(cutline):
        kwargs["cropToCutline"] = cropToCutline
        kwargs["cutlineDSName"] = cutline
        kwargs["cutlineLayer"] = juststem(cutline)

    gdal.Warp(fileout, filelist, **kwargs)
    # ----------------------------------------------------------------------
    return fileout
