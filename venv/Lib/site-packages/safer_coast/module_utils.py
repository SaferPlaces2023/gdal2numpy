# -------------------------------------------------------------------------------
# Licence:
# Copyright (c) 2012-2019 Luzzi Valerio 
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#
# Name:        utils.py
# Purpose:
#
# Author:      Luzzi Valerio
#
# Created:     26/03/2019
# -------------------------------------------------------------------------------
import os
import numpy as np
import pkg_resources
from osgeo import gdal, gdalconst, ogr
from .module_log import Logger


def get_version():
    dist = pkg_resources.get_distribution("safer_coast")
    return dist.version


def GetAttributeTable(fileshp):
    """
    GetAttributeTable
    """
    res = []
    ds = ogr.OpenShared(fileshp)
    if ds:
        layer = ds.GetLayer()

        layerDefinition = layer.GetLayerDefn()
        n = layerDefinition.GetFieldCount()
        fieldnames = [str(layerDefinition.GetFieldDefn(i).GetName()) for i in range(n)]

        for feature in layer:
            line = {}
            for fieldname in fieldnames:
                line["fid"] = feature.GetFID()
                line[fieldname] = feature.GetField(fieldname)
            res.append(line)
        ds = None
    return res


# def RasterizeLike(file_shp, file_dem, file_tif="", burn_fieldname="", z_value=None, nodata=None):
#     """
#     RasterizeLike
#     """
#     ds = gdal.Open(file_dem, gdalconst.GA_ReadOnly)
#     vector = ogr.OpenShared(file_shp)
#     if ds and vector:
#         band = ds.GetRasterBand(1)
#         m, n = ds.RasterYSize, ds.RasterXSize
#         gt, prj = ds.GetGeoTransform(), ds.GetProjection()
#         nodata = band.GetNoDataValue() if nodata is None else nodata
#         # bandtype = gdal.GetDataTypeName(band.DataType)

#         # Open the data source and read in the extent
#         layer = vector.GetLayer()

#         # Create the destination data source
#         CO = ["BIGTIFF=YES", "TILED=YES", "BLOCKXSIZE=256", "BLOCKYSIZE=256", 'COMPRESS=LZW'] if file_tif else []
#         format = "GTiff" if file_tif else "MEM"
#         driver = gdal.GetDriverByName(format)
#         target_ds = driver.Create(file_tif, n, m, 1, band.DataType, CO)
#         if gt is not None:
#             target_ds.SetGeoTransform(gt)
#         if prj is not None:
#             target_ds.SetProjection(prj)
#         band = target_ds.GetRasterBand(1)
#         band.SetNoDataValue(nodata)
#         band.Fill(nodata)

#         # Rasterize
#         # gdal.RasterizeLayer(target_ds, [1], layer, burn_values=[0])

#         if burn_fieldname:
#             gdal.RasterizeLayer(target_ds, [1], layer, options=["ATTRIBUTE=%s" % (burn_fieldname.upper())])
#         elif z_value is not None:
#             gdal.RasterizeLayer(target_ds, [1], layer, burn_values=[z_value])
#         else:
#             gdal.RasterizeLayer(target_ds, [1], layer, burn_values=[1])

#         data = band.ReadAsArray(0, 0, n, m)
#         data[data == nodata] = np.nan

#         ds, vector, target_ds = None, None, None
#         return data, gt, prj

#     Logger.warning(f"file <{file_shp}> or <{file_dem}> does not exist!")
#     return None, None, None


def GDALEuclideanDistance(file_line, fileout=""):
    """
    GDALEuclideanDistance
    """
    creation_options = ["BIGTIFF=YES", "TILED=YES", "BLOCKXSIZE=256", "BLOCKYSIZE=256",
                        "COMPRESS=LZW"] if fileout else []
    distance_options = ["DISTUNITS=GEO", "USE_INPUT_NODATA=NO"]
    format = "GTiff" if fileout else "MEM"

    src_ds = gdal.Open(file_line, gdalconst.GA_ReadOnly)
    if src_ds:
        srcband = src_ds.GetRasterBand(1)
        gt, prj = src_ds.GetGeoTransform(), src_ds.GetProjection()
        cols, rows = src_ds.RasterXSize, src_ds.RasterYSize

        if fileout and os.path.isfile(fileout):
            os.remove(fileout)

        drv = gdal.GetDriverByName(format)
        dst_ds = drv.Create(fileout, cols, rows, 1, gdal.GDT_Float32, creation_options)

        dst_ds.SetGeoTransform(gt)
        dst_ds.SetProjection(prj)

        dstband = dst_ds.GetRasterBand(1)
        # dstband.SetNoDataValue(srcband.GetNoDataValue())

        gdal.ComputeProximity(srcband, dstband, distance_options)

        dist = dstband.ReadAsArray(0, 0, cols, rows)

        srcband = None
        dstband = None
        src_ds = None
        dst_ds = None
    else:
        Logger.error(f"Unable to open {file_line}")
        return None, None, None

    return dist, gt, prj
