# -------------------------------------------------------------------------------
# Licence:
# Copyright (c) 2019
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#
# Name:        main.py
# Purpose:
#
# Author:      Luzzi Valerio
#
# Created:     25/03/2019
# -------------------------------------------------------------------------------
import click
from .module_sea import *
from .module_utils import get_version
from .module_logo import logo
from .module_log import set_level


def welcome():
    return f"""
+------------------------------------------------------------------------------+
|                                                                              |
|           Safer Coast v{get_version()} - FloodHazard by sea\t\t\t\t|
|                                                                              |
+------------------------------------------------------------------------------+"""


@click.command()
@click.option('--dem', type=click.Path(exists=True),  required=True, help='The digital elevation model filename')
@click.option('--src', type=click.Path(exists=False), required=False, help='The shapefile with sources')
@click.option('--field', type=str, default=None, help='The shape fieldname of elevations of the src file.')
@click.option('--sea_mask', type=click.Path(exists=False), required=False,
              help='The sea_mask. 1=sea 0=land. This is needed to calculate watertable excluding sea and in some cases to derive the shoreline.')
@click.option('--barrier', type=click.Path(exists=False), required=False,
              help='A shapefile with barriers with [height] fieldname.')
@click.option('--barrier-selection', type=str, default=None,
              help='A list of barrier features fid to be selected from the above shapefile.Es: 1,2,3')
@click.option('--value', type=float, default=None,
              help='A constant value for all sources. (If --field is not defined ). Deprecated, use --esl instead.')
@click.option('--esl', type=float, default=None,
              help='A constant value for all sources. (If --field is not defined ). Alias for --value.')
@click.option('--sea', type=click.Path(), help='The sea-levels output file')
@click.option('--water', type=click.Path(), help='The waterdepth output file')
@click.option('--r', type=float, default=-1,
              help='Apply terrain resistance to flooding. default is -1 (not applied) 0.002 is a good value.')
@click.option('--friction', is_flag=True, default=False,
              help='Apply friction to flooding based on slope. default is False (not applied).')
@click.option('--shoreline', type=click.Path(exists=True), required=False,
              help='The coastal shoreline. It can be a .shp or .tif pathname.'
                   'This paramater is used in conjunction to --friction or --r parameter.' +
                   'If not assigned, safer_coast TRY to create one for you.')
@click.option('--of', type=click.STRING, required=False, default="GTiff", help="The output format. GTiff|COG")
@click.option('--version', is_flag=True, required=False, default=False, help='Print version.')
@click.option('--debug', is_flag=True, required=False, default=False, help='Debug mode.')
@click.option('--verbose', is_flag=True, required=False, default=False, help='Print some words about what is doing.')
# entry-point click
def main(dem, src, sea_mask, barrier, barrier_selection, sea, water, field, esl, value, r, friction, shoreline,
         of, version,
         debug, verbose):

    
    if version:
        click.echo(f"safer_coast v{get_version()}")
        click.echo(logo())
        return 0

    if verbose:
        click.echo(welcome())

    esl = esl if esl is not None else value  # value is Deprecate use --esl.
    # entry-point python
    # form safer_coast import safer_coast_python
    return safer_coast_python(filedem=dem,
                              filesrc=src,
                              file_seamask=sea_mask,
                              filebarrier=barrier,
                              barrier_selection=barrier_selection,
                              filesea=sea,
                              filewd=water, z_fieldname=field, z_value=esl, resistance=r,
                              friction=friction,
                              file_shoreline=shoreline,
                              of=of,
                              debug=debug)
