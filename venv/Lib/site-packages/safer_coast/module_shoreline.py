# -------------------------------------------------------------------------------
# Licence:
# Copyright (c) 2019-2021
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#
# Name:        module_sea.py
# Purpose:
#
# Author:      Luzzi Valerio
#
# Created:     12/03/2019
# -------------------------------------------------------------------------------
from numba import njit
import numpy as np


@njit
def barrier_dilatation(barrier, barrier_enforced):
    """
    Enforce the barrier with 1px by side
    to avoid d8-propagation in flooding
    """
    m, n = barrier.shape
    # barrier_enforced = np.zeros_like(barrier)

    for i in range(m):
        for j in range(n):
            if ~np.isnan(barrier[i, j]) and barrier[i, j] > 0:
                for (y, x) in [(i - 1, j - 1), (i - 1, j), (i - 1, j + 1),
                               (i, j - 1), (i, j), (i, j + 1),
                               (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)]:
                    if 0 <= y < m and 0 <= x < n:
                        barrier_enforced[y, x] = barrier[i, j]


@njit
def shoreline_from_sea_mask(sea_mask, shore):
    """
    shoreline - detection of line that separate sea by terrain
    """
    m, n = sea_mask.shape
    for i in range(m):
        for j in range(n):
            if sea_mask[i, j] == 1:  # se sono un pixel di mare
                for ne in ((i - 1, j - 1), (i - 1, j), (i - 1, j + 1),
                           (i, j - 1), (i, j + 1),
                           (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)):
                    if 0 <= ne[0] < m and 0 <= ne[1] < n:
                        if sea_mask[ne] == 0:  # e ho un vicino di terra
                            shore[i, j] = 1
                            break