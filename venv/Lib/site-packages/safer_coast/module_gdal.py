# -------------------------------------------------------------------------------
# Licence:
# Copyright (c) 2012-2021 Luzzi Valerio 
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#
# Name:        gdalwarp.py
# Purpose:
#
# Author:      Luzzi Valerio
#
# Created:     06/04/2021
# -------------------------------------------------------------------------------
import glob
import os
import site
from osgeo import gdal, gdalconst
from osgeo import ogr
from .filesystem import justpath, juststem, listify


def copyShapeSchema(fileshp, fileout):
    """
    copyShapeSchema
    """
    dsr = ogr.OpenShared(fileshp)
    driver = ogr.GetDriverByName("ESRI Shapefile")
    dsw = driver.CreateDataSource(fileout)
    if dsr:
        layer1 = dsr.GetLayer()
        layer2 = dsw.CreateLayer(layer1.GetName(), layer1.GetSpatialRef(), layer1.GetGeomType())
        # Copying the old layer schema into the new layer
        defn = layer1.GetLayerDefn()
        for j in range(defn.GetFieldCount()):
            layer2.CreateField(defn.GetFieldDefn(j))
    dsr, dsw = None, None
    return fileout


def feature_selection(fileshp, fileout, fids=None):
    """
    feature_selection - Create a new shapefile filtering features
    """
    copyShapeSchema(fileshp, fileout)
    dsr = ogr.OpenShared(fileshp)
    dsw = ogr.Open(fileout, 1)
    if dsr and dsw:
        layer1 = dsr.GetLayer()
        layer2 = dsw.GetLayer()
        if fids:
            for fid in listify(fids):
                feature = layer1.GetFeature(int(fid))
                layer2.CreateFeature(feature)
        else:
            for feature in layer1:
                layer2.CreateFeature(feature)
    dsr, dwr = None, None
    return fileout


def find_PROJ_LIB():
    """
    find_PROJ_LIB - the path of proj_lib
    """
    pathnames = []
    roots = site.getsitepackages()
    for root in roots:
        pathnames += glob.glob(root + "/osgeo/**/proj.db", recursive=True)
        if len(pathnames):
            break
    return justpath(pathnames[0]) if len(pathnames) else ""


def find_GDAL_DATA():
    """
    find_GDAL_DATA - the path of GDAL_DATA
    """
    pathnames = []
    roots = site.getsitepackages()
    for root in roots:
        pathnames += glob.glob(root + "/osgeo/**/gt_datum.csv", recursive=True)
        if len(pathnames):
            break
    return justpath(pathnames[0]) if len(pathnames) else ""


def gdalwarp(filelist, fileout, dstSRS="", cutline="", pixelsize=0):
    """
    gdalwarp
    """
    kwargs = {
        "format": "GTiff",
        "outputType": gdalconst.GDT_Float32,
        "creationOptions": ["BIGTIFF=YES", "TILED=YES", "BLOCKXSIZE=256", "BLOCKYSIZE=256", "COMPRESS=LZW"],
        "dstNodata": -9999,
        "resampleAlg": gdalconst.GRIORA_Bilinear,
        "multithread": True
    }

    if pixelsize > 0:
        kwargs["xRes"] = pixelsize
        kwargs["yRes"] = pixelsize

    if dstSRS:
        kwargs["dstSRS"] = dstSRS

    if os.path.isfile(cutline):
        kwargs["cropToCutline"] = True
        kwargs["cutlineDSName"] = cutline
        kwargs["cutlineLayer"] = juststem(cutline)

    # gdal.Warp depends on PROJ_LIB and GDAL_DATA --------------------------
    # os.environ["PROJ_LIB"] = ..../site-packages/osgeo/data/proj
    # patch PROJ_LIB - save it before and restore after gdalwarp
    PROJ_LIB = os.environ["PROJ_LIB"] if "PROJ_LIB" in os.environ else ""
    GDAL_DATA = os.environ["GDAL_DATA"] if "GDAL_DATA" in os.environ else ""
    os.environ["PROJ_LIB"] = find_PROJ_LIB()
    os.environ["GDAL_DATA"] = find_GDAL_DATA()

    gdal.Warp(fileout, filelist, **kwargs)

    if PROJ_LIB:
        os.environ["PROJ_LIB"] = PROJ_LIB
    if GDAL_DATA:
        os.environ["GDAL_DATA"] = GDAL_DATA
    # ----------------------------------------------------------------------
    return fileout
